#include <iostream>
#include <queue>

using namespace std;

int main() {
    int n; // Number of processes
    cout << "Enter the number of processes: ";
    cin >> n;

    int bt[n]; // Burst time for each process
    int wt[n]; // Waiting time for each process
    int tat[n]; // Turnaround time for each process

    // Input burst times for each process
    cout << "Enter burst times for each process:\n";
    for (int i = 0; i < n; i++) {
        cout << "Process " << i + 1 << ": ";
        cin >> bt[i];
    }

    int quantum; // Time quantum
    cout << "Enter the time quantum: ";
    cin >> quantum;

    int remaining_time[n]; // Remaining burst time for each process

    // Initialize remaining_time with burst times
    for (int i = 0; i < n; i++) {
        remaining_time[i] = bt[i];
    }

    queue<int> ready_queue; // Queue to store processes ready to execute

    int total_time = 0; // Total time elapsed

    while (true) {
        bool done = true; // Flag to check if all processes are completed

        for (int i = 0; i < n; i++) {
            if (remaining_time[i] > 0) {
                done = false;

                // Execute the process for the time quantum or its remaining time, whichever is smaller
                if (remaining_time[i] <= quantum) {
                    total_time += remaining_time[i];
                    wt[i] = total_time - bt[i];
                    remaining_time[i] = 0;
                } else {
                    total_time += quantum;
                    remaining_time[i] -= quantum;
                }

                // Add the process back to the ready queue if it still has remaining time
                if (remaining_time[i] > 0) {
                    ready_queue.push(i);
                }
            }
        }

        // If all processes are completed, exit the loop
        if (done) {
            break;
        }

        // Move to the next process in the ready queue
        if (!ready_queue.empty()) {
            int next_process = ready_queue.front();
            ready_queue.pop();
            ready_queue.push(next_process);
        }
    }

    // Calculate turnaround time for each process
    for (int i = 0; i < n; i++) {
        tat[i] = wt[i] + bt[i];
    }

    // Calculate average waiting time and average turnaround time
    float avg_wt = 0, avg_tat = 0;
    for (int i = 0; i < n; i++) {
        avg_wt += wt[i];
        avg_tat += tat[i];
    }
    avg_wt /= n;
    avg_tat /= n;

    // Display results
    cout << "Process\tBurst Time\tWaiting Time\tTurnaround Time\n";
    for (int i = 0; i < n; i++) {
        cout << i + 1 << "\t" << bt[i] << "\t\t" << wt[i] << "\t\t" << tat[i] << "\n";
    }

    cout << "Average Waiting Time: " << avg_wt << "\n";
    cout << "Average Turnaround Time: " << avg_tat << "\n";

    return 0;
}
